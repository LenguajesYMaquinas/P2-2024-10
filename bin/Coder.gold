using gold.**

procedure main(args:String[]) begin
   	coder:=createTransducer()
	Utilities.test(coder)
end




function createTransducer():ITransducer begin
	Q := (
			(('a'‥'d')∪{Ø})×
			(('a'‥'d')∪{Ø})×
			(('a'‥'d')∪{Ø})×
			{true, false}×
			{true, false}×
			(0‥3)
		)∪{⟨'I', 'I', 'I', false, false, 0⟩, ⟨'E', 'E', 'E', 'E', 'E', 0⟩}
	Σ:= ('a'‥'d')∪{'!', '#'}
	O := ('a'‥'d')∪{'!', '#', '*'}
	q₀:=⟨'I', 'I', 'I', false, false, 0⟩
	F:= Q\{⟨'E', 'E', 'E', 'E', 'E', 0⟩}  
	return GDeterministicTransducer(Q,Σ,O,q₀,F,δ,g,h)
end

function δ(⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩,σ) begin
	
	//Transicion para mantener el automata en el error
	if ⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩=⟨'E', 'E', 'E', 'E', 'E', 0⟩ then return ⟨'E', 'E', 'E', 'E', 'E', 0⟩
		
	// Para detener el automata cuando se lee #'
	elseif ⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩=⟨Ø, Ø, Ø, true, true, 3⟩ then return ⟨Ø, Ø, Ø, true, true, 3⟩	
	elseif σ='#' and index=3 then return ⟨Ø, Ø, Ø, true, true, 3⟩
	
	// Transicciones para moverse desde el estado inicial
	elseif⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩=⟨'I', 'I', 'I', false, false, 0⟩ and σ∈('a'‥'d') and index=0 then return ⟨σ, Ø, Ø, isEven, true, index+1⟩
	elseif char1∈('a'‥'d') and char2=Ø and char3=Ø and σ∈('a'‥'d') and index=1 then return ⟨char1, σ, char3, isEven, isEqualToPrevious, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3=Ø and σ∈('a'‥'d') and index=2 then return ⟨char1, char2, σ, isEven, isEqualToPrevious, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and σ='!' then return ⟨char1, char2, char3, !isEven, isEqualToPrevious, 0⟩
		
	// Transiciones para moverse despues de la primera subcadena
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and index=0 and σ∈('a'‥'d') and char1=σ then return ⟨σ, char2, char3, isEven, true, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and index=0 and σ∈('a'‥'d') and char1!=σ then return ⟨σ, char2, char3, isEven, false, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and index=1 and σ∈('a'‥'d') and char2=σ then return ⟨char1, σ, char3, isEven, isEqualToPrevious, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and index=1 and σ∈('a'‥'d') and char2!=σ then return ⟨char1, σ, char3, isEven, false, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and index=2 and σ∈('a'‥'d') and char3=σ then return ⟨char1, char2, σ, isEven, isEqualToPrevious, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and index=2 and σ∈('a'‥'d') and char3!=σ then return ⟨char1, char2, σ, isEven, false, index+1⟩
	elseif char1∈('a'‥'d') and char2∈('a'‥'d') and char3∈('a'‥'d') and index=3 and σ='!' then return ⟨char1, char2, char3, !isEven, isEqualToPrevious, 0⟩
	
	else return ⟨'E', 'E', 'E', 'E', 'E', 0⟩
	end
 end
  
function h(⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩,σ) begin
	// Retorna los simbolos
   if σ∈{'#', '!'} then return σ
   // Retorna los caracteres de una substring en posicion impar
   elseif ⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩!=⟨'E', 'E', 'E', 'E', 'E', 0⟩ and !isEven and σ∈(('a'‥'d')∪{'!', '#'}) then return σ
   else return λ
   end
end

function g(⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩) begin
	// Retorna el asterisco para cuando un substirng en posicion par es igual al anterior
	if ⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩!=⟨'E', 'E', 'E', 'E', 'E', 0⟩ and isEven and isEqualToPrevious and index=3 and char1!=Ø then return '*'
   // Retorna la cadena original para cuando un substirng en posicion par es diferente a la anterior
   elseif ⟨char1, char2, char3, isEven, isEqualToPrevious, index⟩!=⟨'E', 'E', 'E', 'E', 'E', 0⟩ and char1!=Ø and char2!=Ø and char3!=Ø and isEven and !isEqualToPrevious and index=3 then string = new StringBuilder() return string.append(String.valueOf(char1)).append(String.valueOf(char2)).append(String.valueOf(char3))
   else return λ
   end
end

 